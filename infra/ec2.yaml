AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance with Auto Scaling Group for n8n deployment'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be deployed
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for the EC2 instance
  
  InstanceType:
    Type: String
    Default: t4g.small
    AllowedValues:
      - t4g.small
      - t4g.medium
    Description: EC2 instance type (ARM-based for cost efficiency)
  
  InstanceProfileName:
    Type: String
    Description: Name of the IAM instance profile
    Default: ''
  
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for n8n files
    Default: ''

Conditions:
  HasInstanceProfile: !Not [!Equals [!Ref InstanceProfileName, '']]

Resources:
  N8nSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'n8n-sg-${AWS::StackName}'
      GroupDescription: Security group for n8n instance - outbound only
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'n8n-sg-${AWS::StackName}'
        - Key: Application
          Value: n8n
        - Key: ManagedBy
          Value: CloudFormation

  N8nLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'n8n-lt-${AWS::StackName}'
      LaunchTemplateData:
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}'
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          !If
            - HasInstanceProfile
            - Name: !Ref InstanceProfileName
            - !Ref 'AWS::NoValue'
        SecurityGroupIds:
          - !Ref N8nSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'n8n-instance-${AWS::StackName}'
              - Key: Application
                Value: n8n
              - Key: ManagedBy
                Value: CloudFormation
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub 'n8n-volume-${AWS::StackName}'
              - Key: Application
                Value: n8n
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update system
            dnf update -y
            
            # Install Docker and PostgreSQL client tools
            dnf install -y docker git
            # Install PostgreSQL client - try 17 first, fallback to 16
            dnf install -y postgresql17 || dnf install -y postgresql16 || dnf install -y postgresql15
            
            # Start Docker
            systemctl start docker
            systemctl enable docker
            
            # Install Docker Compose plugin
            mkdir -p /usr/local/lib/docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-aarch64 -o /usr/local/lib/docker/cli-plugins/docker-compose
            chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            
            # Clone repository  
            cd /opt
            git clone https://github.com/cunicopia-dev/mir-n8n.git
            cd mir-n8n
            
            # Create directories with proper permissions for Docker
            mkdir -p n8n_data local-files
            chmod -R 777 n8n_data local-files
            
            # Create .env file with PostgreSQL
            cat > .env <<EOF
            N8N_ENCRYPTION_KEY=$(openssl rand -hex 24)
            GENERIC_TIMEZONE=UTC
            DB_TYPE=postgresdb
            DB_POSTGRESDB_DATABASE=n8n
            DB_POSTGRESDB_HOST=postgres
            DB_POSTGRESDB_PORT=5432
            DB_POSTGRESDB_USER=n8n
            DB_POSTGRESDB_PASSWORD=$(openssl rand -hex 16)
            S3_BUCKET=${S3BucketName}
            N8N_DIAGNOSTICS_ENABLED=false
            EOF
            
            # Start n8n with PostgreSQL
            docker compose --profile postgres up -d
            
            # Add ec2-user to docker group for SSM sessions
            usermod -aG docker ec2-user
            
            # Wait for containers to be healthy
            sleep 30
            
            # Setup CloudWatch logs
            dnf install -y amazon-cloudwatch-agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "/aws/ec2/n8n/system",
                        "log_stream_name": "{instance_id}/messages"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

  N8nAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub 'n8n-asg-${AWS::StackName}'
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref N8nLaunchTemplate
        Version: !GetAtt N8nLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub 'n8n-asg-instance-${AWS::StackName}'
          PropagateAtLaunch: true
        - Key: Application
          Value: n8n
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: CloudFormation
          PropagateAtLaunch: true

Outputs:
  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref N8nAutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASGName'
  
  SecurityGroupId:
    Description: ID of the security group
    Value: !Ref N8nSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
  
  LaunchTemplateId:
    Description: ID of the launch template
    Value: !Ref N8nLaunchTemplate
    Export:
      Name: !Sub '${AWS::StackName}-LaunchTemplateId'
  
  InstanceId:
    Description: Instance ID (retrieve using ASG describe-instances)
    Value: !Sub 'Use "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${N8nAutoScalingGroup}" to get instance ID'